[
  
  {
    "question": "Rank your 5 favorite, and least favorite, activities from this [list](https://gist.github.com/fool/b0f254ff8c72a5765b6a9138249789d6).",
    "answer": "**Five Favorite:**\n\n1. Write and maintain documentation for our software and blog posts for our website.\n1. Respond to 60+ support requests via email or chat every day\n1. Debug a customer's build using a programming language and framework that you've never seen before\n1. Suggest and champion improvements to the product and workflow to your colleagues in and out of support\n1. Work with the development team to help design a new feature based on feedback from customers \n\n**Five Not-so-favorites:**\n\n1. Engage multiple users at once via chat to answer their questions and troubleshoot problems\n1. Create video tutorials to help teach users a specific feature or use case\n1. Receive occasional phone calls requesting support from our highest-value customers\n1. Find and recruit teammates for the support team\n1. Help manage communications during a service outage ",
    "color": "blue",
    "label": "1"
  },
 
  {
    "question": "What is your favorite thing about providing technical support?",
    "answer": "One of the coolest things is that you get to see problems that may otherwise not pop up in your every day life. They are new challenges that get to be solved and plus you're helping someone in the process. Once that problem is solved, documentation is written and the customer has shipped it's time to celebrate and then get back to work!\n\nI also want to include part of the message I originally sent Chris here because it still rings true for any type of technical support:\n\n> My last official support role was back in college. I worked at RIT's Resnet which specializes in computer repair and helping students and faculty use the school's network. There were days when I felt like I had the best grasp on the problems of our customers and some days where I shouldn't have shown up for work. I soon realized, after a brief conversation about my performance with my boss (and one of my best friends to this day!) that every touch point with the customer maters. Every interaction, no matter how weird the customer is or annoying the may be, is an opportunity to delight and help them get shit done. Services are like gear boxes, without the customer service aspect (the oil) things clunk along until the gears decide to eject themselves all over the place and you subsequently have to pick up all the pieces. In my opinion, and I think you guys agree, having the ability to timely help people with their deployment issues, simplifying/optimizing support processes and making customers feel like badasses to encourage spreading the word is top priority!",
    "color": "red",
    "label": "2"
  },

  {
    "question": "What did you think of our service during the time you used it?  Be honest!  “it sucked” isn’t a wrong answer unless you don’t elaborate and provide some constructive criticism ;)",
    "answer": "It was honestly a sigh of relief. I have been personally hosting my own static websites for the past 4 years on services like Linode and Digital Ocean. There was honestly no reason to be running them there considering all of my work has been statically built (except for a Sinatra side project and a Flask project just for giggles.)\n\nIn some cases, when I ran into errors, the documentation was sorely lacking. For instance, I had to figure out on my own how to change all my submodules to subtrees so Netlify could handle all my external plugins or themes. (I think there was an obscure reference to that issue in the documentation but no actionable information.)\n\nOverall, I'm so happy I made the jump. I no longer have to deal with the nuances of running an optimized web server and concentrate on my writing and content!\n\nAlso, after writing this site I dove into trying to get CMS running on my [main blog.](https://www.jaredwolff.com/blog/) The site is generated with Hugo and that's where most of my problems lay. I wasn't able to use any of Contentful's plugins (turns out their plugins were written some time ago and don't support the latest version of Middleman and Jekyll anyway!) so I had to roll my own solution using the gulpfile that does most of my site's post processing.\n\nAfter about 6 hours or so, I had a much better understanding of their system and came to the realization that it was not for me. Just within the past day though, I was able to get your CMS working on the same blog with better success. After figuring out which folder the correct files went and to ensure that my `config.yml` was YAML compliant, things loaded up seamlessly. I definitely love the concept and it's almost useable besides the obvious graphical bugs, how slow the interface moves when rendering a preview, some YAML parsing errors that I found (both on the config and the frontmatter). I'm really looking forward to using it every day to publish from my iPad rather than lugging out my computer. (Extra high five from me on making it responsive! ✋)",
    "color": "gold",
    "label": "3"
  },

  {
    "question": "Tell about how you made your site and why you chose the tools you did. Briefly explain a challenge you experienced in setting up this site and how you solved it.",
    "answer": "I decided to go with [Middleman](http://middlemanapp.com/) because of a few reasons.\n\n1. I wanted to see what the hubub was about.\n1. I wanted to try something other than Hugo and Jekyll of which i'm comfortable with.\n1. I wanted a challenge! And speaking of.. there were a few bumps in the road:\n\n\tThe first bump happened when I first tried to upload the site to Netlify. Turns out y'all aren't using the same version of Ruby I am. So, when I finally pushed the build promptly died because a dependency was not compatible with the older version of Ruby being run. I took a minute to look up the documentation and added my `.ruby-version` file to my app route and all is well.\n\n\tAnother finicky thing is that JSON files don't support new lines. Every time I wanted to create a new line/new paragraph I need to actually type out the escaped character: `\\n` A mild inconvenience but there's always going to be imperfections in what ever you engineer. That's what makes us human!",
    "color": "grey",
    "label": "4"
  },

  {
    "question": "Could you give us a suggestion to improve this test or the job posting?",
    "answer": "Definitely put some creative constraints on the project. I think folks could get carried away quite fast. I almost did and had to reel things in for my sanity sake. Also, I didn't even know about the job posting until I went to the website. It may be a good idea to announce you're hiring on the JAMStack podcast, etc. I guess it depends on how wide of a net you guys want to cast. Sometimes you let the fish come to you.. ;)",
    "color": "silver",
    "label": "5"
  },

  {
    "question": "Provide a link to documentation for a technical/developer-focused product, that you think are well done, and briefly explain why you think they are well done.",
    "answer": "When implementing a very basic [Flask](http://flask.pocoo.org/docs/0.12/) site, I barely #1 had to visit the documentation and #2 when I had to the documentation it was so vast that it blew my mind a bit. There was so much information about their microframework that hit every nook and cranny that I needed for the small site I was running. I can't say for sure it would solve all my problems but I'm quite impressed. I compare it to the early Jekyll days where documentation was sorely lacking and you found answers in Github issues or on people's personal websites. Building out good documentation is hard because you're never going to fully grasp every use case for your platform or framework. That's where interfacing with your customers and users is important. That's where you get the information about what their pain points using your system are and that way you can alleviate their pain by creating documentation or finding ways to bypass those issues all together.\n\nAdditionally, I think one of the scariest things that can happen is when someone gives up on your product because they can't find answers and they *a)* don't feel like reaching out or *b)* don't care enough to keep going. Good documentation not only keeps people around to use your product but helps your promote it. You guys have been on Hacker News a bunch and it's been a smart move to do so because it's just so easy to get started. Easy in the case of the experience but also easy, when there's questions, to find answers and keep going!",
    "color": "mediumseagreen",
    "label": "6"
  },

  {
    "question": "Why do you think SSL/HTTPS is important?",
    "answer": "I honestly didn't think it was important up until recently. 'Why should I add all this extra work to serve the same website!' I would think. I guess my trust in every single path my traffic and other's traffic takes, when using normal HTTP, was too high. These paths across the internet are vulnerable to man-in-the-middle attacks where bits of malicious javascript could be embedded right in the websites that folks are trying to visit. SSL/HTTPs obscures what you're sending so it's quite unlikely that someone could pull off that same attack without finding vulnerabilities with SSL/HTTPs first. I now run SSL certs on all my sites because it's the right way to protect your visitors whether or not they realize it. It will take time to get everyone converted over but when it's as easy as clicking a button, why not?",
    "color": "orange",
    "label": "7"
  },

  {
    "question": "Explain, in a couple of paragraphs, what you think 2 major challenges around DNS configuration are for less-technical internet end-users",
    "answer": "One of the first major DNS configuration issues I foresee with novices is that because DNS entries are so infrequently changed it's sometimes hard to get a grasp on what you're changing and why your changing it. For instance, if someone were to *educate* the end user it wouldn't matter who was hosting their DNS as they would be able to figure it out on their own. Despite education, Even though i've been doing this for a long long time, I'm afraid to futz around in Amazon's Route 53 because it's so intimidating. Making it easier for people to own and maintain their domains would be a definite plus. Why can't it be as simple as clicking a button like a Netlify SSL cert deploy?\n\nAdding to what I've said just a moment ago, DNS configuration can sometimes be endless. There are tiny nuances throughout that would force people to definitely lose some hair follicles. For instance why do I need a TXT record to verify I own my domain? All I want to do is use Google Webmaster Tools! I think in some cases people don't know what they're getting into when they buy a domain name. They probably think 'Cool! I have a domain name now.. and now I have to do WHAT?! F4$k!' Just looking at the DNS records for my domain name I would have never really understood why what went where and **if it was working.** Getting to this point has been lots of success and failure (probably more failure) whereas less technical folks don't even want to deal with that. They want their website and domain and that's it!",
    "color": "violet",
    "label": "8"
  },

  {
    "question": "A customer writes in saying their “site won’t build”.  Compose your best short (2-paragraph) customer-facing answer without any additional data, that could be useful in the generic case but would also lead to a customer providing a more actionable response.",
    "answer": "Hey. Thanks for reaching out to us. Hopefully we can figure out your build problem.\n\nFirst, let's make sure your build is working on your local machine before trying again on Netlify. There are many static site generators out there but the most popular build commands include `jekyll build` and `hugo` as examples. I highly recommend you look at the documentation for your static site generator if you are having problems locally. Please confirm if you can build locally because it will definitely be easier to go from there after that!\n\nBy the way: here are some links to the documentation for the most popular website generators:\n\n1.  [Jekyll](http://jekyllrb.com/docs/home/)\n1. [Hugo](http://gohugo.io/overview/introduction/)\n1. [Hexo](https://hexo.io/docs/)\n\nIf your static site generator is Ruby based there could be a slew of things that could be wrong. You can check out a link with the answers to our most common build problems [here.](#i-currently-think-this-doesnt-exist)\n\n If you're still having problems, without more specific information it's hard to dial in on what exactly is wrong with limited information. Feel free to send me the name of the site generator you're using and the logs that include the error.\n\n\Thanks!",
    "color": "darkcyan",
    "label": "9"
  },

  {
    "question": "(optional/bonus) Can you set up a redirect from \“/netlify/anything\” to https://www.google.com/search?q=anything ?",
    "answer": "Yea! This is pretty neat. By adding a `_redirects` to a project root, you can define what happens even at a non-existent route. I believe the line in the redirect file should look something like this: \n\n\t\t/netlify/*  https://www.google.com/search?q=:splat",
    "color": "skyblue",
    "label": "10"
  }

]
